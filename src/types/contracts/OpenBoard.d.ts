/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface OpenBoardInterface extends ethers.utils.Interface {
  functions: {
    'MAX_CAPACITY()': FunctionFragment;
    'changeEnabled(bool)': FunctionFragment;
    'changeOwner(address)': FunctionFragment;
    'enabled()': FunctionFragment;
    'historicalDonation()': FunctionFragment;
    'owner()': FunctionFragment;
    'recordId()': FunctionFragment;
    'records(uint256)': FunctionFragment;
    'submitMessage(string)': FunctionFragment;
    'donate(string)': FunctionFragment;
    'ownerClaim()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'MAX_CAPACITY',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'changeEnabled',
    values: [boolean],
  ): string;
  encodeFunctionData(functionFragment: 'changeOwner', values: [string]): string;
  encodeFunctionData(functionFragment: 'enabled', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'historicalDonation',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'recordId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'records',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'submitMessage',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'donate', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'ownerClaim',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'MAX_CAPACITY',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'changeEnabled',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'changeOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'enabled', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'historicalDonation',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recordId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'records', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'submitMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'donate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerClaim', data: BytesLike): Result;

  events: {
    'NewRecord(tuple)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'NewRecord'): EventFragment;
}

export class OpenBoard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OpenBoardInterface;

  functions: {
    MAX_CAPACITY(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    changeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enabled(overrides?: CallOverrides): Promise<[boolean]>;

    historicalDonation(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recordId(overrides?: CallOverrides): Promise<[BigNumber]>;

    records(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, string, BigNumber, boolean, BigNumber] & {
        id: BigNumber;
        sender: string;
        message: string;
        timestamp: BigNumber;
        isDonated: boolean;
        donatedValue: BigNumber;
      }
    >;

    submitMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    donate(
      message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    ownerClaim(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  MAX_CAPACITY(overrides?: CallOverrides): Promise<BigNumber>;

  changeEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  changeOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enabled(overrides?: CallOverrides): Promise<boolean>;

  historicalDonation(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  recordId(overrides?: CallOverrides): Promise<BigNumber>;

  records(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, string, string, BigNumber, boolean, BigNumber] & {
      id: BigNumber;
      sender: string;
      message: string;
      timestamp: BigNumber;
      isDonated: boolean;
      donatedValue: BigNumber;
    }
  >;

  submitMessage(
    message: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  donate(
    message: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  ownerClaim(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_CAPACITY(overrides?: CallOverrides): Promise<BigNumber>;

    changeEnabled(_enabled: boolean, overrides?: CallOverrides): Promise<void>;

    changeOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    enabled(overrides?: CallOverrides): Promise<boolean>;

    historicalDonation(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    recordId(overrides?: CallOverrides): Promise<BigNumber>;

    records(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, string, BigNumber, boolean, BigNumber] & {
        id: BigNumber;
        sender: string;
        message: string;
        timestamp: BigNumber;
        isDonated: boolean;
        donatedValue: BigNumber;
      }
    >;

    submitMessage(message: string, overrides?: CallOverrides): Promise<void>;

    donate(message: string, overrides?: CallOverrides): Promise<void>;

    ownerClaim(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    NewRecord(record?: null): TypedEventFilter<
      [
        [BigNumber, string, string, BigNumber, boolean, BigNumber] & {
          id: BigNumber;
          sender: string;
          message: string;
          timestamp: BigNumber;
          isDonated: boolean;
          donatedValue: BigNumber;
        },
      ],
      {
        record: [BigNumber, string, string, BigNumber, boolean, BigNumber] & {
          id: BigNumber;
          sender: string;
          message: string;
          timestamp: BigNumber;
          isDonated: boolean;
          donatedValue: BigNumber;
        };
      }
    >;
  };

  estimateGas: {
    MAX_CAPACITY(overrides?: CallOverrides): Promise<BigNumber>;

    changeEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    changeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enabled(overrides?: CallOverrides): Promise<BigNumber>;

    historicalDonation(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recordId(overrides?: CallOverrides): Promise<BigNumber>;

    records(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    submitMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    donate(
      message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    ownerClaim(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_CAPACITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    changeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    historicalDonation(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recordId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    records(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    submitMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    donate(
      message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    ownerClaim(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
