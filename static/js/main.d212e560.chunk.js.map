{"version":3,"sources":["connector.tsx","components/basic.tsx","pages/Message/view.tsx","pages/Message/methods.ts","pages/Message/index.tsx","App.tsx","index.tsx","pages/Message/helper.ts"],"names":["Web3ProviderNetwork","createWeb3ReactRoot","ethereum","window","autoRefreshOnNetworkChange","getLibrary","provider","Web3Provider","chainId","parseInt","injected","InjectedConnector","Web3Root","children","Column","styled","display","flexDirection","Row","SizedBox","width","height","style","useStyle","makeStyles","theme","options","justifyContent","alignItems","margin","spacing","caseGroup","flexWrap","padding","marginBottom","bottomButtonGroup","MessageEditorView","methodOptions","selectedMethod","onMethodSelected","cases","checkIsTargetMessage","hashMessage","isWalletEnabled","connectedAccount","connectWallet","onSign","preferJsonStringMessage","classes","useState","messageValue","setMessageValue","messageHashValue","setMessageHashValue","signatureValue","setSignatureValue","disabledSignBtn","setDisabledSignBtn","snackBarState","setSnackBarState","onMessageChanged","useCallback","message","a","messageHash","toEditorJsonString","easyCheckMessageHash","console","error","onSignButtonClick","signature","log","easyCheckSignature","isOpening","isPositive","JSON","stringify","undefined","useEffect","value","Typography","component","variant","align","className","Select","onChange","event","target","map","method","MenuItem","tag","index","Chip","size","label","name","onClick","catch","onTagClick","fontSize","placeholder","mode","showGutter","wrapEnabled","showPrintMargin","highlightActiveLine","enableBasicAutocompletion","enableLiveAutocompletion","tabSize","TextField","id","Button","color","disabled","slice","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","prevState","severity","DEMO_TYPED_DATA_01","DEMO_TYPED_DATA_02","DEMO_TYPED_DATA_03","Methods","eth_sign","Promise","resolve","signMessage","account","library","getSigner","send","then","response","result","personal_sign","length","ethUtil","toString","typed_data_sign","easyCheckLegacyEIP712Struct","signUtil","parse","isMetaMask","typed_data_sign_v1","typed_data_sign_v3","easyCheckStandardEIP712Struct","sign","typed_data_sign_v4","MessageEditor","web3","useWeb3React","active","activate","setSelectedMethod","Object","keys","useStyles","appBar","position","main","marginLeft","marginRight","breakpoints","up","paper","marginTop","App","Fragment","CssBaseline","AppBar","Toolbar","noWrap","Paper","Message","ReactDOM","render","StrictMode","document","getElementById","startsWith","Buffer","from","e","endsWith","struct","Array","isArray","every","i","type","required","data"],"mappings":"4UAIMA,EAAsBC,YAAoB,WAExCC,EAAaC,OAAbD,SACRA,IAAaA,EAASE,4BAA6B,GAEnD,IAAMC,EAAa,SAACC,GAAD,OACjB,IAAIC,IACFD,EAC4B,kBAArBA,EAASE,QACZF,EAASE,QACmB,kBAArBF,EAASE,QAChBC,SAASH,EAASE,SAClB,QAWKE,EAAW,IAAIC,IAAkB,IAC/BC,EATE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACf,cAAC,IAAD,CAAmBR,WAAYA,EAA/B,SACE,cAACL,EAAD,CAAqBK,WAAYA,EAAjC,SACGQ,O,sKCpBDC,EAASC,YAAO,MAAPA,CAAc,CAC3BC,QAAS,OACTC,cAAe,WAGXC,EAAMH,YAAO,MAAPA,CAAc,CACxBC,QAAS,OACTC,cAAe,QAGXE,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAV,OACf,qBAAKC,MAAO,CAAEF,QAAOC,a,mCCuBjBE,G,cAAWC,aAAW,SAACC,GAAD,MAAY,CACtCC,QAAS,CACPC,eAAgB,WAChBC,WAAY,SACZC,OAAQJ,EAAMK,QAAQ,EAAG,EAAG,IAE9BC,UAAW,CACTC,SAAU,OACVC,QAAS,EACTC,aAAcT,EAAMK,QAAQ,GAC5B,QAAS,CACPD,OAAQJ,EAAMK,QAAQ,MAG1BK,kBAAmB,CACjBR,eAAgB,WAChBM,QAAS,QAIAG,EAAoB,SAAC,GAYT,IAXvBC,EAWsB,EAXtBA,cACAC,EAUsB,EAVtBA,eACAC,EASsB,EATtBA,iBACAC,EAQsB,EARtBA,MACAC,EAOsB,EAPtBA,qBACAC,EAMsB,EANtBA,YACAC,EAKsB,EALtBA,gBACAC,EAIsB,EAJtBA,iBACAC,EAGsB,EAHtBA,cACAC,EAEsB,EAFtBA,OACAC,EACsB,EADtBA,wBAEMC,EAAUzB,IAEhB,EAAwC0B,mBAAiB,IAAzD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAgDF,mBAAiB,IAAjE,mBAAOG,EAAP,KAAyBC,EAAzB,KACA,EAA4CJ,mBAAiB,IAA7D,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAA8CN,oBAAkB,GAAhE,mBAAOO,EAAP,KAAwBC,EAAxB,KACA,EACER,qBADF,mBAAOS,EAAP,KAAsBC,EAAtB,KAGMC,EAAmBC,sBAAW,uCAClC,WAAOC,GAAP,eAAAC,EAAA,mEAEQD,IAAWrB,EAAqBqB,GAFxC,gCAGwCpB,EAAYoB,GAHpD,OAGYE,EAHZ,OAKMF,EAAUf,EACNkB,YAAmBH,GACnBA,EAEAI,YAAqBF,IACvBX,EAAoBW,GACpBP,GAAmB,IAEnBA,GAAmB,GAb3B,uDAiBIA,GAAmB,GACnBU,QAAQC,MAAM,2BAAd,MAlBJ,QAqBEjB,EAAgBW,GAChBP,EAAkB,IAtBpB,yDADkC,sDAyBlC,CAACR,EAAyBN,EAAsBC,IAG5C2B,GAAoBR,sBAAW,sBAAC,4BAAAE,EAAA,+EAEFjB,EAAOI,GAFL,OAE5BoB,EAF4B,OAGlCf,EAAkBe,GAClBH,QAAQI,IAAI,cAAeD,GAEvBA,GAAaE,YAAmBF,GAClCX,EAAiB,CACfc,WAAW,EACXC,YAAY,EACZZ,QAAS,wBAGXH,EAAiB,CACfc,WAAW,EACXC,YAAY,EACZZ,QAAS,sBAhBqB,gDAoBlCK,QAAQC,MAAM,2BAAd,MAEAT,EAAiB,CACfc,WAAW,EACXC,YAAY,EACZZ,QACe,kBAAN,EAAP,iCAC2Ba,KAAKC,UAAL,UAAkBC,EAAW,IACpD,oBA5B0B,yDA+BnC,CAAC3B,EAAcJ,IAgBlB,OARAgC,qBAAU,WACJtC,EAAM,GAAGuC,OACXnB,EAAiBpB,EAAM,GAAGuC,SAE3B,CAACvC,EAAOoB,IAEXO,QAAQI,IAAI,kBAAmBb,GAG7B,qCACE,eAAC5C,EAAD,CAAQQ,MAAO,CAAEW,QAAS,GAA1B,UACE,cAAC+C,EAAA,EAAD,CAAYC,UAAW,KAAMC,QAAS,KAAMC,MAAO,SAAnD,qBAIA,cAACjE,EAAD,CAAKkE,UAAWpC,EAAQtB,QAAxB,SACE,cAAC2D,EAAA,EAAD,CACEN,MAAOzC,EACPgD,SAAU,SAACC,GAAD,OAAWhD,EAAiBgD,EAAMC,OAAOT,QAFrD,SAIG1C,EAAcoD,KAAI,SAACC,GAAD,OACjB,cAACC,EAAA,EAAD,CAAuBZ,MAAOW,EAA9B,SACGA,GADYA,UAOrB,eAAC5E,EAAD,WACE,cAACI,EAAD,CAAKkE,UAAWpC,EAAQjB,UAAxB,SACGS,EAAMiD,KAAI,SAACG,EAAKC,GAAN,OACT,cAACC,EAAA,EAAD,CACEC,KAAM,QAENC,MAAOJ,EAAIK,KACXC,QAAS,kBAzCJ,SAACL,GAClB,IAAM/B,EAAUtB,EAAMqD,GAAOd,MAC7B5B,EAAgBW,GAChBF,EAAiBE,GAASqC,MAAMhC,QAAQC,OAsCbgC,CAAWP,KAFrBD,EAAIK,WAMf,cAAC,IAAD,CACE7E,MAAO,OACPiF,SAAU,GACVJ,KAAM,iBACNK,YAAa,qBACbC,KAAM,OACN9E,MAAO,0BACP+E,YAAY,EACZC,aAAW,EACXC,iBAAe,EACfC,qBAAmB,EACnBC,2BAAyB,EACzBC,0BAAwB,EACxBC,QAAS,EACT/B,MAAO7B,EACPoC,SAAU1B,IAEZ,cAAC,EAAD,CAAUvC,OAAQ,KAClB,cAAC0F,EAAA,EAAD,CACEC,GAAI,eACJ9B,QAAQ,WACRH,MAAO3B,EACP4C,MAAO,iBAET,cAAC,EAAD,CAAU3E,OAAQ,KAClB,cAAC0F,EAAA,EAAD,CACEC,GAAI,YACJ9B,QAAQ,WACRH,MAAOzB,EACP0C,MAAO,cAET,cAAC,EAAD,CAAU3E,OAAQ,KAClB,eAACH,EAAD,CAAKkE,UAAWpC,EAAQb,kBAAxB,UACE,cAAC8E,EAAA,EAAD,CACE/B,QAAS,YACTgC,MAAO,UACPC,SAAUxE,EACVuD,QAASrD,EAJX,SAMGF,GAAmBC,EAAnB,UACMA,EAAiBwE,MAAM,EAAG,GADhC,cACwCxE,EAAiBwE,OACnD,IAEH,YAEN,cAAC,EAAD,CAAUhG,MAAO,KACjB,cAAC6F,EAAA,EAAD,CACE/B,QAAS,YACTgC,MAAO,YACPC,SAAU3D,IAAoBb,EAC9BuD,QAAS7B,GAJX,uBAzDJ,qBAA2B/B,OAoE7B,cAAC+E,EAAA,EAAD,CACEC,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CC,MAAmB,OAAb/D,QAAa,IAAbA,OAAA,EAAAA,EAAee,aAAa,EAClCiD,iBAAkB,IAClBC,QAAS,kBACPhE,GAAiB,SAACiE,GAAD,mBAAC,eAAoBA,GAArB,IAAgCnD,WAAW,QALhE,SAQE,cAAC,IAAD,CAAUoD,UAAuB,OAAbnE,QAAa,IAAbA,OAAA,EAAAA,EAAegB,YAAa,UAAY,QAA5D,gBACGhB,QADH,IACGA,OADH,EACGA,EAAeI,gB,gBCrOpBgE,EACJ,urBACIC,EACJ,wyBACIC,EACJ,8jBAEWC,EAAgD,CAC3DC,SAAU,CACRjC,KAAM,WACNzD,MAAO,CACL,CACEyD,KAAM,SACNlB,MACE,sEAEJ,CACEkB,KAAM,SACNlB,MACE,uEAGNtC,qBAAsByB,IACtBxB,YAAY,WAAD,4BAAE,WAAOoB,GAAP,SAAAC,EAAA,+EACXoE,QAAQC,QAAQtE,IADL,2CAAF,mDAAC,GAEZuE,YAAa,WAEXvE,GAFW,IACTwE,EADS,EACTA,QADS,SACAC,QAIRC,UAAUF,GACVhI,SAASA,SAASmI,KAAK,WAAY,CAACH,EAASxE,IAC7C4E,MAAK,SAACC,GAAD,OAAmBA,EAASC,YAExCC,cAAe,CACb5C,KAAM,gBACNzD,MAAO,CACL,CAAEyD,KAAM,eAAgBlB,MAAO,gBAC/B,CAAEkB,KAAM,aAAclB,MAAO,eAE/BtC,qBAAsB,SAACqB,GAAD,MACD,kBAAZA,GAAwBA,EAAQgF,OAAS,GAClDpG,YAAY,WAAD,4BAAE,WAAOoB,GAAP,SAAAC,EAAA,+EACXgF,eACEA,sBAA4BA,WAAiBjF,IAAUkF,SAAS,SAFvD,2CAAF,mDAAC,GAIZX,YAAa,WAEXvE,GAFW,IACTwE,EADS,EACTA,QADS,SACAC,QAEiBC,UAAUF,GAASD,YAAYvE,KAE/DmF,gBAAiB,CACfhD,KAAM,kBACNzD,MAAO,CACL,CACEyD,KAAM,eACNlB,MAAO,6DAET,CACEkB,KAAM,kBACNlB,MACE,wGAEJ,CACEkB,KAAM,aACNlB,MAAO,6DAGXhC,yBAAyB,EACzBN,qBAAsByG,IACtBxG,YAAY,WAAD,4BAAE,WAAOoB,GAAP,SAAAC,EAAA,+EACXgF,eAAqBI,qBAA4BxE,KAAKyE,MAAMtF,MADjD,2CAAF,mDAAC,GAEZuE,YAAa,WAEXvE,GAFW,IACTwE,EADS,EACTA,QAASC,EADA,EACAA,QADA,OAIXA,EAAQjI,SACLmI,KACC,oBACAF,EAAQjI,SAAS+I,WACb,CAAC1E,KAAKyE,MAAMtF,GAAUwE,GACtB,CAACA,EAASxE,IAEf4E,MAAK,SAACC,GAAD,OAAmBA,EAASC,YAExCU,mBAAoB,CAClBrD,KAAM,qBACNzD,MAAO,CACL,CACEyD,KAAM,eACNlB,MAAO,6DAET,CACEkB,KAAM,kBACNlB,MACE,wGAEJ,CACEkB,KAAM,aACNlB,MAAO,6DAGXhC,yBAAyB,EACzBN,qBAAsByG,IACtBxG,YAAY,WAAD,4BAAE,WAAOoB,GAAP,SAAAC,EAAA,+EACXgF,eAAqBI,qBAA4BxE,KAAKyE,MAAMtF,MADjD,2CAAF,mDAAC,GAEZuE,YAAa,WAEXvE,GAFW,IACTwE,EADS,EACTA,QADS,SACAC,QAGHjI,SACLmI,KAAK,uBAAwB,CAACH,EAASxE,IACvC4E,MAAK,SAACC,GAAD,OAAmBA,EAASC,YAExCW,mBAAoB,CAClBtD,KAAM,qBACNzD,MAAO,CACL,CACEyD,KAAM,OACNlB,MAAO+C,GAET,CACE7B,KAAM,aACNlB,MAAOgD,GAET,CACE9B,KAAM,uBACNlB,MAAOiD,IAGXjF,yBAAyB,EACzBN,qBAAsB+G,IACtB9G,YAAY,WAAD,4BAAE,WAAOoB,GAAP,SAAAC,EAAA,+EACXgF,eACEI,iBAAwBM,KAAK9E,KAAKyE,MAAMtF,IAAUkF,SAAS,SAFlD,2CAAF,mDAAC,GAIZX,YAAa,WAEXvE,GAFW,IACTwE,EADS,EACTA,QADS,SACAC,QAGHjI,SACLmI,KAAK,uBAAwB,CAACH,EAASxE,IACvC4E,MAAK,SAACC,GAAD,OAAmBA,EAASC,YAExCc,mBAAoB,CAClBzD,KAAM,qBACNzD,MAAO,CACL,CACEyD,KAAM,OACNlB,MAAO+C,GAET,CACE7B,KAAM,aACNlB,MAAOgD,GAET,CACE9B,KAAM,uBACNlB,MAAOiD,GAET,CACE/B,KAAM,aACNlB,MACE,25BAEJ,CACEkB,KAAM,gBACNlB,MACE,kgCAGNhC,yBAAyB,EACzBN,qBAAsB+G,IACtB9G,YAAY,WAAD,4BAAE,WAAOoB,GAAP,SAAAC,EAAA,+EACXgF,eACEI,iBAAwBM,KAAK9E,KAAKyE,MAAMtF,IAAU,GAAMkF,SAAS,SAFxD,2CAAF,mDAAC,GAIZX,YAAa,WAEXvE,GAFW,IACTwE,EADS,EACTA,QADS,SACAC,QAGHjI,SACLmI,KAAK,uBAAwB,CAACH,EAASxE,IACvC4E,MAAK,SAACC,GAAD,OAAmBA,EAASC,aCzK3Be,EA5BO,WACpB,IAAMC,EAAOC,cACLC,EAA8BF,EAA9BE,OAAQC,EAAsBH,EAAtBG,SAAUzB,EAAYsB,EAAZtB,QAC1B,EAA4CrF,mBAAiB,YAA7D,mBAAOX,EAAP,KAAuB0H,EAAvB,KAEMtE,EAA4BuC,EAAQ3F,GAAkB,YACtDQ,EAASe,uBACb,SAACC,GAAD,OAAqB4B,EAAO2C,YAAYuB,EAAM9F,KAC9C,CAAC8F,EAAMlE,IAGT,OACE,cAAC,EAAD,CACE/C,gBAAiBmH,EACjBlH,iBAAkB0F,EAClBzF,cAAe,kBAAMkH,EAASrJ,IAC9B2B,cAAe4H,OAAOC,KAAKjC,GAC3B3F,eAAgBA,EAChBC,iBAAkByH,EAClBxH,MAAOkD,EAAOlD,MACdO,wBAAyB2C,EAAO3C,wBAChCL,YAAagD,EAAOhD,YACpBD,qBAAsBiD,EAAOjD,qBAC7BK,OAAQA,KClBRqH,EAAY3I,aAAW,SAACC,GAAD,MAAY,CACvC2I,OAAQ,CACNlD,MAAO,UACPmD,SAAU,YAEZC,KAAK,aACHlJ,MAAO,OACPmJ,WAAY9I,EAAMK,QAAQ,GAC1B0I,YAAa/I,EAAMK,QAAQ,IAC1BL,EAAMgJ,YAAYC,GAAG,IAAyB,EAAnBjJ,EAAMK,QAAQ,IAAU,CAClDV,MAAO,IACPmJ,WAAY,OACZC,YAAa,SAGjBG,MAAM,aACJC,UAAWnJ,EAAMK,QAAQ,GACzBI,aAAcT,EAAMK,QAAQ,GAC5BG,QAASR,EAAMK,QAAQ,IACtBL,EAAMgJ,YAAYC,GAAG,IAAyB,EAAnBjJ,EAAMK,QAAQ,IAAU,CAClD8I,UAAWnJ,EAAMK,QAAQ,GACzBI,aAAcT,EAAMK,QAAQ,GAC5BG,QAASR,EAAMK,QAAQ,SA4Bd+I,EAvBH,WACV,IAAM7H,EAAUmH,IAEhB,OACE,eAAC,IAAMW,SAAP,WACE,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAQ5F,UAAWpC,EAAQoH,OAA3B,SACE,cAACa,EAAA,EAAD,UACE,cAACjG,EAAA,EAAD,CAAYE,QAAS,KAAMgC,MAAO,UAAWgE,QAAM,EAAnD,gCAMJ,sBAAM9F,UAAWpC,EAAQsH,KAAzB,SACE,cAACa,EAAA,EAAD,CAAO/F,UAAWpC,EAAQ2H,MAA1B,SACE,cAACS,EAAD,YCjDVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,U,iCCX1B,kMAEavH,EAAuB,SAClCF,GAEA,GACyB,kBAAhBA,GACPA,EAAY0H,WAAW,OACA,KAAvB1H,EAAY8E,OAEZ,IACE,OAA2D,KAApD6C,EAAOC,KAAK5H,EAAYoD,MAAM,GAAI,OAAO0B,OAChD,MAAO+C,GACP1H,QAAQC,MAAMyH,GAIlB,OAAO,GAGIrH,EAAqB,SAACF,GACjC,GACsB,iBAAbA,GACPA,EAAUoH,WAAW,OACA,MAArBpH,EAAUwE,OAEV,IACE,OAAyD,KAAlD6C,EAAOC,KAAKtH,EAAU8C,MAAM,GAAI,OAAO0B,OAC9C,MAAO+C,GACP1H,QAAQC,MAAMyH,GAIlB,OAAO,GAGI3C,EAA8B,SAACnE,GAC1C,GACmB,kBAAVA,GACPA,EAAM2G,WAAW,MACjB3G,EAAM+G,SAAS,KAEf,IACE,IAAMC,EAASpH,KAAKyE,MAAMrE,GAC1B,GAAIiH,MAAMC,QAAQF,GAChB,OAAOA,EAAOG,OACZ,SAACC,GAAD,MACe,kBAANA,GACW,kBAAXA,EAAEC,MACQ,iBAAVD,EAAElG,WACGpB,IAAZsH,EAAEpH,SAGR,MAAO8G,GACP1H,QAAQC,MAAMyH,GAGlB,OAAO,GAGIrC,EAAgC,SAACzE,GAC5C,GACmB,kBAAVA,GACPA,EAAM2G,WAAW,MACjB3G,EAAM+G,SAAS,KAEf,IACE,IAAMC,EAASpH,KAAKyE,MAAMrE,GAC1B,GAAsB,kBAAXgH,EACT,OAAO5C,uBAA8BkD,SAASH,OAAM,SAACC,GAAD,QAASJ,EAAOI,MAEtE,MAAON,GACP1H,QAAQC,MAAMyH,GAGlB,OAAO,GAGI5H,EAAqB,SAACc,GACjC,GAAIA,EACF,IACE,IAAMuH,EAAO3H,KAAKyE,MAAMrE,GACxB,OAAOJ,KAAKC,UAAU0H,OAAMzH,EAAW,GACvC,MAAOgH,IAGX,OAAO9G,K","file":"static/js/main.d212e560.chunk.js","sourcesContent":["import { Web3Provider } from \"@ethersproject/providers\";\nimport { createWeb3ReactRoot, Web3ReactProvider } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(\"NETWORK\");\n\nconst { ethereum } = window as any;\nethereum && (ethereum.autoRefreshOnNetworkChange = false);\n\nconst getLibrary = (provider: any) =>\n  new Web3Provider(\n    provider,\n    typeof provider.chainId === \"number\"\n      ? provider.chainId\n      : typeof provider.chainId === \"string\"\n      ? parseInt(provider.chainId)\n      : \"any\"\n  );\n\nconst Web3Root = ({ children }: { children: any }) => (\n  <Web3ReactProvider getLibrary={getLibrary}>\n    <Web3ProviderNetwork getLibrary={getLibrary}>\n      {children}\n    </Web3ProviderNetwork>\n  </Web3ReactProvider>\n);\n\nexport const injected = new InjectedConnector({});\nexport default Web3Root;\n","import { styled } from \"@material-ui/core\";\n\nconst Column = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\",\n});\n\nconst Row = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"row\",\n});\n\nconst SizedBox = ({ width, height }: { width?: any; height?: any }) => (\n  <div style={{ width, height }} />\n);\n\nexport { Column, Row, SizedBox };\n","import {\n  Button,\n  Chip,\n  makeStyles,\n  MenuItem,\n  Select,\n  Snackbar,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Column, Row, SizedBox } from \"../../components/basic\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport {\n  easyCheckMessageHash,\n  easyCheckSignature,\n  toEditorJsonString,\n} from \"./helper\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-tomorrow_night_eighties\";\n\nexport interface MessageViewProps {\n  methodOptions: Array<string>;\n  selectedMethod: string;\n  onMethodSelected: (method: string) => void;\n  cases: Array<{ name: string; value: string }>;\n  checkIsTargetMessage: (message: string) => boolean;\n  hashMessage: (message: string) => Promise<string>;\n  isWalletEnabled: boolean;\n  connectedAccount?: string | null;\n  connectWallet: () => void;\n  onSign: (message: string) => Promise<string>;\n  preferJsonStringMessage?: boolean;\n}\n\nconst useStyle = makeStyles((theme) => ({\n  options: {\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    margin: theme.spacing(3, 0, 1),\n  },\n  caseGroup: {\n    flexWrap: \"wrap\",\n    padding: 0,\n    marginBottom: theme.spacing(1),\n    \"& > *\": {\n      margin: theme.spacing(0.5),\n    },\n  },\n  bottomButtonGroup: {\n    justifyContent: \"flex-end\",\n    padding: 0,\n  },\n}));\n\nexport const MessageEditorView = ({\n  methodOptions,\n  selectedMethod,\n  onMethodSelected,\n  cases,\n  checkIsTargetMessage,\n  hashMessage,\n  isWalletEnabled,\n  connectedAccount,\n  connectWallet,\n  onSign,\n  preferJsonStringMessage,\n}: MessageViewProps) => {\n  const classes = useStyle();\n\n  const [messageValue, setMessageValue] = useState<string>(\"\");\n  const [messageHashValue, setMessageHashValue] = useState<string>(\"\");\n  const [signatureValue, setSignatureValue] = useState<string>(\"\");\n  const [disabledSignBtn, setDisabledSignBtn] = useState<boolean>(true);\n  const [snackBarState, setSnackBarState] =\n    useState<{ isOpening: boolean; isPositive?: boolean; message?: string }>();\n\n  const onMessageChanged = useCallback(\n    async (message: string) => {\n      try {\n        if (message && checkIsTargetMessage(message)) {\n          const messageHash: string = await hashMessage(message);\n\n          message = preferJsonStringMessage\n            ? toEditorJsonString(message)\n            : message;\n\n          if (easyCheckMessageHash(messageHash)) {\n            setMessageHashValue(messageHash);\n            setDisabledSignBtn(false);\n          } else {\n            setDisabledSignBtn(true);\n          }\n        }\n      } catch (e) {\n        setDisabledSignBtn(true);\n        console.error(\"Error in hashing message\", e);\n      }\n\n      setMessageValue(message);\n      setSignatureValue(\"\");\n    },\n    [preferJsonStringMessage, checkIsTargetMessage, hashMessage]\n  );\n\n  const onSignButtonClick = useCallback(async () => {\n    try {\n      const signature: string = await onSign(messageValue);\n      setSignatureValue(signature);\n      console.log(\"signature: \", signature);\n\n      if (signature && easyCheckSignature(signature)) {\n        setSnackBarState({\n          isOpening: true,\n          isPositive: true,\n          message: \"Signed successfully\",\n        });\n      } else {\n        setSnackBarState({\n          isOpening: true,\n          isPositive: false,\n          message: \"Invalid signature\",\n        });\n      }\n    } catch (e) {\n      console.error(\"Error in signing message\", e);\n\n      setSnackBarState({\n        isOpening: true,\n        isPositive: false,\n        message:\n          typeof e === \"object\"\n            ? `Error in signing: \\n${JSON.stringify(e, undefined, 2)}`\n            : \"Something wrong\",\n      });\n    }\n  }, [messageValue, onSign]);\n\n  const onTagClick = (index: number) => {\n    const message = cases[index].value;\n    setMessageValue(message);\n    onMessageChanged(message).catch(console.error);\n  };\n\n  useEffect(() => {\n    if (cases[0].value) {\n      onMessageChanged(cases[0].value);\n    }\n  }, [cases, onMessageChanged]);\n\n  console.log(\"snackBarState: \", snackBarState);\n\n  return (\n    <>\n      <Column style={{ padding: 0 }}>\n        <Typography component={\"h1\"} variant={\"h4\"} align={\"center\"}>\n          Message\n        </Typography>\n\n        <Row className={classes.options}>\n          <Select\n            value={selectedMethod}\n            onChange={(event) => onMethodSelected(event.target.value as string)}\n          >\n            {methodOptions.map((method) => (\n              <MenuItem key={method} value={method}>\n                {method}\n              </MenuItem>\n            ))}\n          </Select>\n        </Row>\n\n        <Column key={`content_of_${selectedMethod}`}>\n          <Row className={classes.caseGroup}>\n            {cases.map((tag, index) => (\n              <Chip\n                size={\"small\"}\n                key={tag.name}\n                label={tag.name}\n                onClick={() => onTagClick(index)}\n              />\n            ))}\n          </Row>\n          <AceEditor\n            width={\"100%\"}\n            fontSize={14}\n            name={\"message_editor\"}\n            placeholder={\"Input Message Here\"}\n            mode={\"json\"}\n            theme={\"tomorrow_night_eighties\"}\n            showGutter={false}\n            wrapEnabled\n            showPrintMargin\n            highlightActiveLine\n            enableBasicAutocompletion\n            enableLiveAutocompletion\n            tabSize={2}\n            value={messageValue}\n            onChange={onMessageChanged}\n          />\n          <SizedBox height={10} />\n          <TextField\n            id={\"message_hash\"}\n            variant=\"outlined\"\n            value={messageHashValue}\n            label={\"Message Hash\"}\n          />\n          <SizedBox height={10} />\n          <TextField\n            id={\"signature\"}\n            variant=\"outlined\"\n            value={signatureValue}\n            label={\"Signature\"}\n          />\n          <SizedBox height={10} />\n          <Row className={classes.bottomButtonGroup}>\n            <Button\n              variant={\"contained\"}\n              color={\"primary\"}\n              disabled={isWalletEnabled}\n              onClick={connectWallet}\n            >\n              {isWalletEnabled && connectedAccount\n                ? `${connectedAccount.slice(0, 4)}...${connectedAccount.slice(\n                    -4\n                  )}`\n                : \"Connect\"}\n            </Button>\n            <SizedBox width={16} />\n            <Button\n              variant={\"contained\"}\n              color={\"secondary\"}\n              disabled={disabledSignBtn || !isWalletEnabled}\n              onClick={onSignButtonClick}\n            >\n              SIGN\n            </Button>\n          </Row>\n        </Column>\n      </Column>\n      <Snackbar\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n        open={snackBarState?.isOpening || false}\n        autoHideDuration={3000}\n        onClose={() =>\n          setSnackBarState((prevState) => ({ ...prevState, isOpening: false }))\n        }\n      >\n        <MuiAlert severity={snackBarState?.isPositive ? \"success\" : \"error\"}>\n          {snackBarState?.message}\n        </MuiAlert>\n      </Snackbar>\n    </>\n  );\n};\n","import {\n  easyCheckLegacyEIP712Struct,\n  easyCheckMessageHash,\n  easyCheckStandardEIP712Struct,\n} from \"./helper\";\nimport { Web3ReactContextInterface } from \"@web3-react/core/dist/types\";\nimport * as ethUtil from \"ethereumjs-util\";\nimport * as signUtil from \"eth-sig-util\";\n\nexport interface MessageSignMethod {\n  name: string;\n  cases: Array<{ name: string; value: string }>;\n  preferJsonStringMessage?: boolean;\n  checkIsTargetMessage: (message: string) => boolean;\n  hashMessage: (message: string) => Promise<string>;\n  signMessage: (\n    web3: Web3ReactContextInterface,\n    message: string\n  ) => Promise<string>;\n}\n\nconst DEMO_TYPED_DATA_01 =\n  '{\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}],\"Person\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"Mail\":[{\"name\":\"from\",\"type\":\"Person\"},{\"name\":\"to\",\"type\":\"Person\"},{\"name\":\"contents\",\"type\":\"string\"}]},\"primaryType\":\"Mail\",\"domain\":{\"name\":\"Ether Mail\",\"version\":\"1\",\"chainId\":1,\"verifyingContract\":\"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\"},\"message\":{\"from\":{\"name\":\"Cow\",\"wallet\":\"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\"},\"to\":{\"name\":\"Bob\",\"wallet\":\"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\"},\"contents\":\"Hello, Bob!\"}}';\nconst DEMO_TYPED_DATA_02 =\n  '{\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}],\"Person\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"Mail\":[{\"name\":\"from\",\"type\":\"Person\"},{\"name\":\"to\",\"type\":\"Person\"},{\"name\":\"contents\",\"type\":\"string\"},{\"name\":\"payload\",\"type\":\"bytes\"}]},\"primaryType\":\"Mail\",\"domain\":{\"name\":\"Ether Mail\",\"version\":\"1\",\"chainId\":1,\"verifyingContract\":\"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\"},\"message\":{\"from\":{\"name\":\"Cow\",\"wallet\":\"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\"},\"to\":{\"name\":\"Bob\",\"wallet\":\"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\"},\"contents\":\"Hello, Bob!\",\"payload\":\"0x25192142931f380985072cdd991e37f65cf8253ba7a0e675b54163a1d133b8ca\"}}';\nconst DEMO_TYPED_DATA_03 =\n  '{\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}],\"Person\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"mother\",\"type\":\"Person\"},{\"name\":\"father\",\"type\":\"Person\"}]},\"domain\":{\"name\":\"Family Tree\",\"version\":\"1\",\"chainId\":1,\"verifyingContract\":\"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\"},\"primaryType\":\"Person\",\"message\":{\"name\":\"Jon\",\"mother\":{\"name\":\"Lyanna\",\"father\":{\"name\":\"Rickard\"}},\"father\":{\"name\":\"Rhaegar\",\"father\":{\"name\":\"Aeris II\"}}}}';\n\nexport const Methods: { [key: string]: MessageSignMethod } = {\n  eth_sign: {\n    name: \"eth_sign\",\n    cases: [\n      {\n        name: \"Demo 1\",\n        value:\n          \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n      },\n      {\n        name: \"Demo 2\",\n        value:\n          \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n      },\n    ],\n    checkIsTargetMessage: easyCheckMessageHash,\n    hashMessage: async (message: string): Promise<string> =>\n      Promise.resolve(message),\n    signMessage: (\n      { account, library }: Web3ReactContextInterface,\n      message: string\n    ): Promise<string> =>\n      library\n        .getSigner(account)\n        .provider.provider.send(\"eth_sign\", [account, message])\n        .then((response: any) => response.result),\n  },\n  personal_sign: {\n    name: \"personal_sign\",\n    cases: [\n      { name: \"Hello OneKey\", value: \"Hello OneKey\" },\n      { name: \"To Da Moon\", value: \"To Da Moon\" },\n    ],\n    checkIsTargetMessage: (message: string | undefined): boolean =>\n      typeof message === \"string\" && message.length > 0,\n    hashMessage: async (message: string): Promise<string> =>\n      ethUtil.addHexPrefix(\n        ethUtil.hashPersonalMessage(ethUtil.toBuffer(message)).toString(\"hex\")\n      ),\n    signMessage: (\n      { account, library }: Web3ReactContextInterface,\n      message: string\n    ): Promise<string> => library.getSigner(account).signMessage(message),\n  },\n  typed_data_sign: {\n    name: \"typed_data_sign\",\n    cases: [\n      {\n        name: \"Single Value\",\n        value: '[{\"type\":\"string\",\"name\":\"message\",\"value\":\"Hi, Alice!\"}]',\n      },\n      {\n        name: \"Multiple values\",\n        value:\n          '[{\"type\":\"string\",\"name\":\"message\",\"value\":\"Hi, Alice!\"},{\"type\":\"uint8\",\"name\":\"value\",\"value\":10}]',\n      },\n      {\n        name: \"With bytes\",\n        value: '[{\"type\":\"bytes\",\"name\":\"message\",\"value\":\"0xdeadbeaf\"}]',\n      },\n    ],\n    preferJsonStringMessage: true,\n    checkIsTargetMessage: easyCheckLegacyEIP712Struct,\n    hashMessage: async (message: string): Promise<string> =>\n      ethUtil.addHexPrefix(signUtil.typedSignatureHash(JSON.parse(message))),\n    signMessage: (\n      { account, library }: Web3ReactContextInterface,\n      message: string\n    ): Promise<string> =>\n      library.provider\n        .send(\n          \"eth_signTypedData\",\n          library.provider.isMetaMask\n            ? [JSON.parse(message), account]\n            : [account, message]\n        )\n        .then((response: any) => response.result),\n  },\n  typed_data_sign_v1: {\n    name: \"typed_data_sign_v1\",\n    cases: [\n      {\n        name: \"Single Value\",\n        value: '[{\"type\":\"string\",\"name\":\"message\",\"value\":\"Hi, Alice!\"}]',\n      },\n      {\n        name: \"Multiple values\",\n        value:\n          '[{\"type\":\"string\",\"name\":\"message\",\"value\":\"Hi, Alice!\"},{\"type\":\"uint8\",\"name\":\"value\",\"value\":10}]',\n      },\n      {\n        name: \"With bytes\",\n        value: '[{\"type\":\"bytes\",\"name\":\"message\",\"value\":\"0xdeadbeaf\"}]',\n      },\n    ],\n    preferJsonStringMessage: true,\n    checkIsTargetMessage: easyCheckLegacyEIP712Struct,\n    hashMessage: async (message: string): Promise<string> =>\n      ethUtil.addHexPrefix(signUtil.typedSignatureHash(JSON.parse(message))),\n    signMessage: (\n      { account, library }: Web3ReactContextInterface,\n      message: string\n    ): Promise<string> =>\n      library.provider\n        .send(\"eth_signTypedData_v1\", [account, message])\n        .then((response: any) => response.result),\n  },\n  typed_data_sign_v3: {\n    name: \"typed_data_sign_v3\",\n    cases: [\n      {\n        name: \"Demo\",\n        value: DEMO_TYPED_DATA_01,\n      },\n      {\n        name: \"With bytes\",\n        value: DEMO_TYPED_DATA_02,\n      },\n      {\n        name: \"With recursive types\",\n        value: DEMO_TYPED_DATA_03,\n      },\n    ],\n    preferJsonStringMessage: true,\n    checkIsTargetMessage: easyCheckStandardEIP712Struct,\n    hashMessage: async (message: string): Promise<string> =>\n      ethUtil.addHexPrefix(\n        signUtil.TypedDataUtils.sign(JSON.parse(message)).toString(\"hex\")\n      ),\n    signMessage: (\n      { account, library }: Web3ReactContextInterface,\n      message: string\n    ): Promise<string> =>\n      library.provider\n        .send(\"eth_signTypedData_v3\", [account, message])\n        .then((response: any) => response.result),\n  },\n  typed_data_sign_v4: {\n    name: \"typed_data_sign_v4\",\n    cases: [\n      {\n        name: \"Demo\",\n        value: DEMO_TYPED_DATA_01,\n      },\n      {\n        name: \"With bytes\",\n        value: DEMO_TYPED_DATA_02,\n      },\n      {\n        name: \"With recursive types\",\n        value: DEMO_TYPED_DATA_03,\n      },\n      {\n        name: \"With array\",\n        value:\n          '{\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}],\"Person\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"wallets\",\"type\":\"address[]\"}],\"Mail\":[{\"name\":\"from\",\"type\":\"Person\"},{\"name\":\"to\",\"type\":\"Person[]\"},{\"name\":\"contents\",\"type\":\"string\"}],\"Group\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"members\",\"type\":\"Person[]\"}]},\"domain\":{\"name\":\"Ether Mail\",\"version\":\"1\",\"chainId\":1,\"verifyingContract\":\"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\"},\"primaryType\":\"Mail\",\"message\":{\"from\":{\"name\":\"Cow\",\"wallets\":[\"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\",\"0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF\"]},\"to\":[{\"name\":\"Bob\",\"wallets\":[\"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\"0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57\",\"0xB0B0b0b0b0b0B000000000000000000000000000\"]}],\"contents\":\"Hello, Bob!\"}}',\n      },\n      {\n        name: \"With 2D array\",\n        value:\n          '{\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}],\"Person\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"wallets\",\"type\":\"address[]\"},{\"name\":\"logo_matrix\",\"type\":\"int[][]\"}],\"Mail\":[{\"name\":\"from\",\"type\":\"Person\"},{\"name\":\"to\",\"type\":\"Person[]\"},{\"name\":\"contents\",\"type\":\"string\"}],\"Group\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"members\",\"type\":\"Person[]\"}]},\"domain\":{\"name\":\"Ether Mail\",\"version\":\"1\",\"chainId\":1,\"verifyingContract\":\"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\"},\"primaryType\":\"Mail\",\"message\":{\"from\":{\"name\":\"Cow\",\"wallets\":[\"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\",\"0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF\"],\"logo_matrix\":[[0,255],[-255,-1]]},\"to\":[{\"name\":\"Bob\",\"wallets\":[\"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\"0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57\",\"0xB0B0b0b0b0b0B000000000000000000000000000\"],\"logo_matrix\":[[0,0],[0,0]]}],\"contents\":\"Hello, Bob!\"}}',\n      },\n    ],\n    preferJsonStringMessage: true,\n    checkIsTargetMessage: easyCheckStandardEIP712Struct,\n    hashMessage: async (message: string): Promise<string> =>\n      ethUtil.addHexPrefix(\n        signUtil.TypedDataUtils.sign(JSON.parse(message), true).toString(\"hex\")\n      ),\n    signMessage: (\n      { account, library }: Web3ReactContextInterface,\n      message: string\n    ): Promise<string> =>\n      library.provider\n        .send(\"eth_signTypedData_v4\", [account, message])\n        .then((response: any) => response.result),\n  },\n};\n","import { MessageEditorView } from \"./view\";\nimport { useCallback, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { MessageSignMethod, Methods } from \"./methods\";\nimport { injected } from \"../../connector\";\n\nconst MessageEditor = () => {\n  const web3 = useWeb3React();\n  const { active, activate, account } = web3;\n  const [selectedMethod, setSelectedMethod] = useState<string>(\"eth_sign\");\n\n  const method: MessageSignMethod = Methods[selectedMethod || \"eth_sign\"];\n  const onSign = useCallback(\n    (message: string) => method.signMessage(web3, message),\n    [web3, method]\n  );\n\n  return (\n    <MessageEditorView\n      isWalletEnabled={active}\n      connectedAccount={account}\n      connectWallet={() => activate(injected)}\n      methodOptions={Object.keys(Methods)}\n      selectedMethod={selectedMethod}\n      onMethodSelected={setSelectedMethod}\n      cases={method.cases}\n      preferJsonStringMessage={method.preferJsonStringMessage}\n      hashMessage={method.hashMessage}\n      checkIsTargetMessage={method.checkIsTargetMessage}\n      onSign={onSign}\n    />\n  );\n};\n\nexport default MessageEditor;\n","import {\n  AppBar,\n  CssBaseline,\n  makeStyles,\n  Paper,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport MessageEditor from \"./pages/Message\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    color: \"default\",\n    position: \"relative\",\n  },\n  main: {\n    width: \"auto\",\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    [theme.breakpoints.up(800 + theme.spacing(2) * 2)]: {\n      width: 800,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(5),\n    },\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar className={classes.appBar}>\n        <Toolbar>\n          <Typography variant={\"h6\"} color={\"inherit\"} noWrap>\n            Ethereum Utils\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <main className={classes.main}>\n        <Paper className={classes.paper}>\n          <MessageEditor />\n        </Paper>\n      </main>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Web3Root from \"./connector\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3Root>\n      <App />\n    </Web3Root>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import * as signUtil from \"eth-sig-util\";\n\nexport const easyCheckMessageHash = (\n  messageHash: string | undefined\n): boolean => {\n  if (\n    typeof messageHash === \"string\" &&\n    messageHash.startsWith(\"0x\") &&\n    messageHash.length === 66\n  ) {\n    try {\n      return Buffer.from(messageHash.slice(2), \"hex\").length === 32;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  return false;\n};\n\nexport const easyCheckSignature = (signature: string | undefined): boolean => {\n  if (\n    typeof signature == \"string\" &&\n    signature.startsWith(\"0x\") &&\n    signature.length === 132\n  ) {\n    try {\n      return Buffer.from(signature.slice(2), \"hex\").length === 65;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  return false;\n};\n\nexport const easyCheckLegacyEIP712Struct = (value: string | undefined) => {\n  if (\n    typeof value === \"string\" &&\n    value.startsWith(\"[\") &&\n    value.endsWith(\"]\")\n  ) {\n    try {\n      const struct = JSON.parse(value);\n      if (Array.isArray(struct)) {\n        return struct.every(\n          (i: any) =>\n            typeof i === \"object\" &&\n            typeof i.type === \"string\" &&\n            typeof i.name == \"string\" &&\n            i.value !== undefined\n        );\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  return false;\n};\n\nexport const easyCheckStandardEIP712Struct = (value: string | undefined) => {\n  if (\n    typeof value === \"string\" &&\n    value.startsWith(\"{\") &&\n    value.endsWith(\"}\")\n  ) {\n    try {\n      const struct = JSON.parse(value);\n      if (typeof struct === \"object\") {\n        return signUtil.TYPED_MESSAGE_SCHEMA.required.every((i) => !!struct[i]);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  return false;\n};\n\nexport const toEditorJsonString = (value: string): string => {\n  if (value) {\n    try {\n      const data = JSON.parse(value);\n      return JSON.stringify(data, undefined, 2);\n    } catch (e) {}\n  }\n\n  return value;\n};\n"],"sourceRoot":""}